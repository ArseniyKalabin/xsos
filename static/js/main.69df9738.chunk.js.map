{"version":3,"sources":["Cell.js","NewGame.js","Board.js","App.js","index.js"],"names":["cell","props","className","onClick","click","id","value","newGame","message","winner","restart","initialState","cells","Array","fill","player","weHaveAWinner","draw","winnerLines","Board","state","cellClickHandler","tempArr","setState","checkWinner","checkDraw","i","counter","forEach","val","randomMoveHandler","emptyKeys","key","push","Math","floor","random","length","restartGameHandler","renderArr","this","NewGame","map","Cell","Component","App","ReactDOM","render","document","getElementById"],"mappings":"+MAIeA,EAFF,SAAAC,GAAK,OAAI,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,MAAMH,EAAMI,MAAMJ,EAAMK,QCc1EC,EAdC,SAAAN,GACZ,IAAIO,EAAU,sCAId,OAHGP,EAAMQ,SACLD,EAAU,uCAAaP,EAAMQ,OAAnB,WAGd,yBAAKP,UAAU,WACX,yBAAKA,UAAU,UACdM,EACD,4BAAQN,UAAU,cAAcC,QAASF,EAAMS,SAA/C,eCPFC,EAAe,CACjBC,MAAOC,MAAM,GAAGC,KAAK,MACrBC,OAAQ,IACRC,eAAe,EACfC,MAAM,GAEJC,EAAc,CAChB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAiGIC,E,2MA5FXC,MAAQ,CACJR,MAAOC,MAAM,GAAGC,KAAK,MACrBC,OAAQ,IACRC,eAAe,EACfC,MAAM,G,EAGVI,iBAAmB,SAAChB,GAChB,IAAIiB,EAAO,YAAO,EAAKF,MAAMR,OAC1BU,EAAQjB,IAAO,EAAKe,MAAMJ,eAAiB,EAAKI,MAAMH,OAGzDK,EAAQjB,GAAM,EAAKe,MAAML,OACzB,EAAKQ,SAAS,CAACX,MAAOU,IACtB,EAAKE,YAAYF,GACjB,EAAKG,UAAUH,K,EAGnBE,YAAc,SAACF,GACX,IAAK,IAAII,KAAKR,EACV,GACII,EAAQJ,EAAYQ,GAAG,KACpBJ,EAAQJ,EAAYQ,GAAG,MAAQJ,EAAQJ,EAAYQ,GAAG,KACtDJ,EAAQJ,EAAYQ,GAAG,MAAQJ,EAAQJ,EAAYQ,GAAG,IAGrD,YADA,EAAKH,SAAS,CAACP,eAAc,IAIzC,EAAKO,UAAS,SAACH,GACX,MAAO,CACCL,OAAyB,MAAjBK,EAAML,OAAe,IAAI,S,EAKjDU,UAAY,SAACH,GACT,IAAIK,EAAU,EACdL,EAAQM,SAAQ,SAAAC,GACRA,GACAF,OAGJA,GACA,EAAKJ,SAAS,CAACN,MAAK,K,EAI5Ba,kBAAoB,WAChB,IAAIR,EAAO,YAAO,EAAKF,MAAMR,OAAQmB,EAAY,GACjDT,EAAQM,SAAQ,SAACC,EAAIG,GACbH,GACAE,EAAUE,KAAKD,MAGvB,EAAKX,iBAAiBU,EAAUG,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,W,EAGzEC,mBAAqB,WACjB,EAAKf,SAASZ,I,wEAGT,IAAD,OACA4B,EAAS,YAAOC,KAAKpB,MAAMR,OAAQL,EAAU,KASjD,OAPGiC,KAAKpB,MAAMJ,gBACVT,EAAU,kBAACkC,EAAD,CAAShC,OAAQ+B,KAAKpB,MAAML,OAAQL,QAAS8B,KAAKF,sBAE7DE,KAAKpB,MAAMH,OACVV,EAAU,kBAACkC,EAAD,CAAS/B,QAAS8B,KAAKF,sBAIjC,yBAAKpC,UAAU,QACX,wCAAcsC,KAAKpB,MAAML,QACzB,yBAAKb,UAAU,SACVqC,EAAUG,KAAI,SAACb,EAAKG,GACjB,OACA,kBAACW,EAAD,CAAMvC,MAAO,EAAKiB,iBAAkBf,MAAOuB,EAAKxB,GAAI2B,EAAKA,IAAKA,OAGjEzB,GAEL,6BACI,4BAAQL,UAAU,YAAYC,QAASqC,KAAKF,oBAA5C,WACA,4BAAQpC,UAAU,cAAcC,QAASqC,KAAKV,mBAA9C,gB,GAvFAc,aCTLC,MATf,WACE,OACE,yBAAK3C,UAAU,OACb,qCACA,kBAAC,EAAD,QCFN4C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.69df9738.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst cell = props => <div className=\"cell\" onClick={() => props.click(props.id)}>{props.value}</div>;\r\n\r\nexport default cell;","import React from 'react';\r\n\r\nconst newGame = props => {\r\n    let message = <div>Draw!</div>;\r\n    if(props.winner){\r\n        message = <div>Player {props.winner} wins!</div>;\r\n    }\r\n    return(\r\n    <div className=\"newgame\">\r\n        <div className=\"winner\">\r\n        {message}\r\n        <button className=\"greenButton\" onClick={props.restart}>New Game</button>\r\n        </div>\r\n    </div>\r\n)};\r\n\r\nexport default newGame;","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport NewGame from './NewGame';\r\n\r\nconst initialState = {\r\n    cells: Array(9).fill(null),\r\n    player: 'X',\r\n    weHaveAWinner: false,\r\n    draw: false\r\n};\r\nconst winnerLines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n\r\nclass Board extends Component {\r\n\r\n    state = {\r\n        cells: Array(9).fill(null),\r\n        player: 'X',\r\n        weHaveAWinner: false,\r\n        draw: false\r\n    }\r\n\r\n    cellClickHandler = (id) => {\r\n        let tempArr = [...this.state.cells];\r\n        if(tempArr[id] || this.state.weHaveAWinner || this.state.draw){\r\n            return;\r\n        }\r\n        tempArr[id] = this.state.player;\r\n        this.setState({cells: tempArr});  \r\n        this.checkWinner(tempArr);     \r\n        this.checkDraw(tempArr);     \r\n    }\r\n\r\n    checkWinner = (tempArr) => {\r\n        for (let i in winnerLines){\r\n            if (\r\n                tempArr[winnerLines[i][0]] \r\n                && tempArr[winnerLines[i][0]] === tempArr[winnerLines[i][1]] \r\n                && tempArr[winnerLines[i][1]] === tempArr[winnerLines[i][2]]\r\n                ){\r\n                    this.setState({weHaveAWinner:true});\r\n                    return;\r\n                }\r\n        }\r\n        this.setState((state) => {\r\n            return {\r\n                    player: state.player === 'X'?'O':'X'\r\n                };\r\n          });  \r\n    }\r\n\r\n    checkDraw = (tempArr) => {\r\n        let counter = 0;\r\n        tempArr.forEach(val => {\r\n            if(!val){\r\n                counter++;\r\n            }\r\n        });\r\n        if(!counter){\r\n            this.setState({draw:true});\r\n        }\r\n    }\r\n\r\n    randomMoveHandler = () => {\r\n        let tempArr = [...this.state.cells], emptyKeys = [];\r\n        tempArr.forEach((val,key) => {\r\n            if(!val){\r\n                emptyKeys.push(key);\r\n            }\r\n        })\r\n        this.cellClickHandler(emptyKeys[Math.floor(Math.random() * emptyKeys.length)]);\r\n    }\r\n\r\n    restartGameHandler = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    render(){\r\n        let renderArr = [...this.state.cells], newGame = null;\r\n\r\n        if(this.state.weHaveAWinner){\r\n            newGame = <NewGame winner={this.state.player} restart={this.restartGameHandler} />\r\n        }\r\n        if(this.state.draw){\r\n            newGame = <NewGame restart={this.restartGameHandler} />\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div>Player: {this.state.player}</div>\r\n                <div className=\"board\">\r\n                    {renderArr.map((val, key) => {\r\n                        return(\r\n                        <Cell click={this.cellClickHandler} value={val} id={key} key={key} />\r\n                        )}\r\n                    )}\r\n                    {newGame}\r\n                </div>    \r\n                <div>\r\n                    <button className=\"redButton\" onClick={this.restartGameHandler}>Restart</button>\r\n                    <button className=\"greenButton\" onClick={this.randomMoveHandler}>Random</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Board;","import React from 'react';\nimport Board from './Board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Xs&Os</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}